plugins{
    id 'java-gradle-plugin'
    id 'maven-publish'
}

configure(allprojects){
    apply plugin: 'java'
    apply plugin: 'maven-publish'

    sourceSets.main.java.srcDirs = [layout.projectDirectory.dir('src')]

    version = 'v146.0.2'
    ext{
        compilerVersion = JavaVersion.current().ordinal() - JavaVersion.VERSION_17.ordinal() + 17

        arc = {String module ->
            return "com.github.Anuken.Arc$module:$arcVersion"
        }

        mindustry = {String module ->
            return "com.github.Anuken.Mindustry$module:$mindustryVersion"
        }
    }

    configurations.configureEach{
        resolutionStrategy.eachDependency{
            if(requested.group == 'com.github.Anuken.Arc'){
                useVersion arcVersion
            }
        }
    }

    repositories{
        google()
        mavenCentral()
        maven{url 'https://oss.sonatype.org/content/repositories/snapshots/'}
        maven{url 'https://oss.sonatype.org/content/repositories/releases/'}
        maven{url 'https://raw.githubusercontent.com/Zelaux/MindustryRepo/master/repository'}
        maven{url 'https://jitpack.io'}
    }

    java{
        withJavadocJar()
        withSourcesJar()
        toolchain{
            languageVersion = JavaLanguageVersion.of(compilerVersion)
        }
    }

    tasks.withType(JavaCompile).configureEach{
        options.incremental = true
        options.encoding = 'UTF-8'
        options.compilerArgs << '-Xlint:-options'
    }

    tasks.withType(Javadoc).configureEach{
        options{
            encoding = 'UTF-8'

            String exports = (project.property('org.gradle.jvmargs') as String)
                .split('\\s+')
                .findAll{it.startsWith('--add-opens')}
                .collect{"--add-exports ${it.substring('--add-opens='.length())}"}
                .inject(' '){accum, arg -> "$accum $arg"}

            def opts = new File(temporaryDir, 'exports.options')
            opts.withWriter('UTF-8'){writer -> writer.write("-Xdoclint:none $exports")}
            optionFiles << opts
        }
    }
}

configure(project(':downgrader')){
    tasks.withType(JavaCompile).configureEach{
        sourceCompatibility = 8
        targetCompatibility = 8
    }
}

configure(allprojects - project(':downgrader')){
    dependencies{
        annotationProcessor project(':downgrader')
    }

    tasks.withType(JavaCompile).configureEach{
        sourceCompatibility = 17
        targetCompatibility = 8

        doFirst{
            sourceCompatibility = 8
        }
    }
}

configure([project(':downgrader'), project(':entity')]){
    sourceSets.main.resources.srcDirs = [layout.projectDirectory.dir('assets')]

    group = 'com.github.GlennFolker.EntityAnno'
    publishing.publications.register('maven', MavenPublication){
        from components.java
    }

    dependencies{
        implementation "${arc(':arc-core')}"
    }
}

configure(project(':entity')){
    dependencies{
        implementation "${mindustry(':core')}"
        implementation "com.squareup:javapoet:$javapoetVersion"
    }
}

apply plugin: 'java-gradle-plugin'

group = 'com.github.GlennFolker'
gradlePlugin{
    plugins.create('entityAnno'){
        id = 'com.github.GlennFolker.EntityAnno'
        displayName = 'EntityAnno'
        implementationClass = 'ent.EntityAnnoPlugin'
    }
}

dependencies{
    implementation "${arc(':arc-core')}"
    implementation "org.jetbrains.kotlin.jvm:org.jetbrains.kotlin.jvm.gradle.plugin:$kotlinVersion"
    implementation "org.jetbrains.kotlin.kapt:org.jetbrains.kotlin.kapt.gradle.plugin:$kotlinVersion"
}
